[
  {
    "keys": ["super+'"],
    "command": "bh_async_key",
    "args": {
      "lines": true,
      "no_outside_adj": null,
      "plugin": {
        "command": "bh_modules.bracketselect",
        "type": ["__all__"]
      }
    }
  },
  {
    "keys": ["super+shift+'"],
    "command": "bh_async_key",
    "args": {
      "lines": true,
      "no_outside_adj": null,
      "plugin": {
        "args": {
          "always_include_brackets": true
        },
        "command": "bh_modules.bracketselect",
        "type": ["__all__"]
      }
    }
  },
  {
    "keys": ["super+;"],
    "command": "ace_jump_char"
  },
  { "keys": ["ctrl+,", "t"], "command": "clojure_repl_extensions", "args": {"command": "run-tests" }},
  { "keys": ["ctrl+,", "T"], "command": "clojure_repl_extensions", "args": {"command": "run-all-tests" }},
  { "keys": ["ctrl+,", "e"], "command": "clojure_repl_extensions", "args": {"command": "exit" }},
  { "keys": ["ctrl+,", "n"], "command": "clojure_repl_extensions", "args": {"command": "switch-namespace" }},
  { "keys": ["ctrl+,", "r"], "command": "clojure_repl_extensions", "args": {"command": "reload" }},
  { "keys": ["ctrl+,", "R"], "command": "clojure_repl_extensions", "args": {"command": "reload-all" }},
  { "keys": ["ctrl+,", "d"], "command": "clojure_repl_extensions", "args": {"command": "doc" }},
  { "keys": ["ctrl+,", "D"], "command": "clojure_repl_extensions", "args": {"command": "source" }},
  { "keys": ["ctrl+,", "i"], "command": "clojure_repl_extensions", "args": {"command": "dir" }},
  // Clojure
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'"
    },
    "context": [
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.clojure"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'${0:$SELECTION}'"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.clojure"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "noop",
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^'",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.clojure"
      }
    ]
  },
  // Lisp
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'"
    },
    "context": [
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.lisp"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'${0:$SELECTION}'"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.lisp"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "noop",
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^'",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.lisp"
      }
    ]
  },
  // Scheme
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'"
    },
    "context": [
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.scheme"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'${0:$SELECTION}'"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.scheme"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "noop",
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^'",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.scheme"
      }
    ]
  }
]
